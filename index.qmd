---
title: TELOPSing around
author:
  - name: Jose GÃ³mez-Dans
    orcid: 0000-0003-4787-8307
    
    email: jose.gomez-dans@kcl.ac.uk
    affiliations:
      - King's College London
keywords:
  - Farts
  - Methane
abstract: |
  Fly around with a camera, what could go wrong?
plain-language-summary: |
  Loads of interesting things
key-points:
  - I'm bored of life
date: last-modified
bibliography: references.bib
citation:
  container-title: Earth and Space Science
number-sections: true
jupyter: python3
---

## Mathced filter theory

I have a data cube as a numpy array called `data`, with dimensions `n_bands, y, x`. I want to write a clean simple function to perform a PCA on `data` along the `n_bands` dimension. I want to report the variance explained by each PC, and be able to select a number of PCs to transform the original data into a compressed space matrix of `n_selected_bands, nx*ny`, which I then want to use as a in input to a simple clustering algorithm. Can you outline the structure of the code, in terms of Python functions with inputs and outputs, but do not yet write any code.


        
    
    
Now assume I have a signal model that states that the measured radiance can be written as a linear combination of a signal of interest $\vec{b}$, a background term $\vec{u}$ and some clutter $\vec{\epsilon}$:
$$
\vec{r}(\lambda) = \alpha\cdot \vec{b} + \vec{u} + \vec{\epsilon}
$$

We define a vector $\vec{q}$ that will act as a filter. We define this vector from the assumption of the clutter being Gaussian:

$$
\vec{q} = \frac{\mathbf{C}^{-1}\vec{b}}{\sqrt{\vec{b}^{\top}\mathbf{C}^{-1}\vec{b}}}
$$

The goal is that given a stack of $N$ observed radiance vectors $R$, the signal of interest $\vec{b}$, and assuming $\vec{u}=\sum_{i=1}^{N}R_i$ and that we can calculate the covariance matrix $\mathbf{C}=\frac{1}{N}\sum_{i=1}^{N}(\vec{R}_i - \vec{u})()(\vec{R}_i - \vec{u})^{\top}$, to estimate the value of $q^{\top}\vec{r}$ for all the elements of the $R$ matrix.

It is also useful to define the signal-to-clutter ratio:
$$
\frac{S}{C}=\alpha\sqrt{\vec{q}^{\top}\mathbf{C}^{-1}\vec{b}}
$$

## Implementation

From the previous discussion, it appears that we only need a handful of things
to calculate this filter: the reference spectrum of the species we're after,
an idea of the background and estimates of the inverse covariance of the noise
and clutter signals. We assume that we can calculate the reference signal using
Radis or HITRAN or whatever. The background can just be mean value of the measured
spectra, and we can guesstimate the inverse covariance using the centred radiance data.

It appears that a reasonable way to do this is to initially cluster the acquired radiance 
image and to calculate the filter coefficients for each cluster. The assumption is that the
clusters will relate to regions with a common behaviour in terms of temperatures, emmissivities
and so on.

### Clustering

The clustering method you use is arbitrary, but given that the data collected has
around 90 spectral bands, it's probably a good idea to use a PCA to reduce the dimensionality
and thus avoid the *curse of dimensionality* which is a sad fact of life. 

## Example

Let's see a random illustration with one file from Bacton, with an example for methane (@fig-bacton-ch4). The results for the filter are heavily dependent on the cluster that's been used to estimate the background covariance matrix. The filter shape is also quite random, and I don't really know whether this is due to scaling of the $\vec{b}$ signal or something else?

I have done the same with the $N_2 O$ reference spectrum in @fig-bacton-n2o, and the results are also fairly similar and equally puzzling....


```{python}
# | label: fig-bacton-ch4
# | fig-cap: "(Top) Result of applying a matched filter to the an image of Bacton and searching for a $CH_4$ spectrum. (Bottom) The reference $CH_4$ spectrum and the different filter weights calculated for each cluster."
# | echo: false

from matched_filter import match_filter_image
import matplotlib.pyplot as plt

telops_fname = (
    "/home/jose/data/TELOPS_UK/"
    + "2_Bacton_M_1200/2_Bacton_M_1200_Data_20240625_122135513.radiance.sc"
)
reference_fname = "/home/jose/data/TELOPS_UK/CH4_ref_spectra_subsampled.csv"
matched_filter, clusters, params = match_filter_image(
    telops_fname, reference_fname, 10, 4, retval_all=True
)
fig, axs = plt.subplots(nrows=2, ncols=1, figsize=(8, 7))
axs = axs.flatten()

im = axs[0].imshow(matched_filter, cmap="magma")
fig.subplots_adjust(right=0.75)
cbar_ax = fig.add_axes([0.8, 0.55, 0.03, 0.35])

# Add a colorbar to the subplot
cbar = plt.colorbar(im, cax=cbar_ax)
axs[0].set_title("CH4 matched filter")
axs[1].plot(params["wv"], params["ref_signal"], "-", lw=2, label="Ref signal")
ax2 = axs[1].twinx()
for cluster in range(4):
    ax2.plot(
        params["wv"], params["filter"][cluster], "-", label=f"Clust {cluster}"
    )
# Add legends to the plot
lines, labels = axs[1].get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines + lines2, labels + labels2, loc="upper left")



```

```{python}
# | label: fig-bacton-n2o
# | fig-cap: "(Top) Result of applying a matched filter to the an image of Bacton and searching for a $N_2 O$ spectrum. (Bottom) The reference $CH_4$ spectrum and the different filter weights calculated for each cluster."
# | echo: false

reference_fname = "/home/jose/data/TELOPS_UK/N2O_ref_spectra_subsampled"
matched_filter, clusters = match_filter_image(
    telops_fname, reference_fname, 10, 4
)
fig, axs = plt.subplots(nrows=2, ncols=1, figsize=(8, 7))
axs = axs.flatten()

im = axs[0].imshow(matched_filter, cmap="magma")
fig.subplots_adjust(right=0.75)
cbar_ax = fig.add_axes([0.8, 0.55, 0.03, 0.35])

# Add a colorbar to the subplot
cbar = plt.colorbar(im, cax=cbar_ax)
axs[0].set_title("N2O matched filter")
axs[1].plot(params["wv"], params["ref_signal"], "-", lw=2, label="Ref signal")
ax2 = axs[1].twinx()
for cluster in range(4):
    ax2.plot(
        params["wv"], params["filter"][cluster], "-", label=f"Clust {cluster}"
    )
# Add legends to the plot
lines, labels = axs[1].get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines + lines2, labels + labels2, loc="upper left")


```


## Conclusion

## References {.unnumbered}

::: {#refs}
:::